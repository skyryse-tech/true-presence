# Face Attendance System - Docker Compose Configuration
# Production-ready microservices architecture

services:
  # Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: face_attendance_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - web
      - admin_dashboard
    networks:
      - face_attendance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend API
  web:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: face_attendance_backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://face_user:${POSTGRES_PASSWORD}@postgres:5432/face_attendance
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:${RABBITMQ_PASSWORD}@rabbitmq:5672//
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,${DOMAIN_NAME}
      - CORS_ALLOWED_ORIGINS=https://${DOMAIN_NAME}
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
      - ./logs/backend:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - face_attendance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Face Processing Workers
  ai_worker:
    build:
      context: .
      dockerfile: ai-services/Dockerfile
    container_name: face_worker
    environment:
      - WORKER_ID=worker_1
      - RABBITMQ_URL=amqp://admin:${RABBITMQ_PASSWORD}@rabbitmq:5672//
      - REDIS_URL=redis://redis:6379/1
      - DATABASE_URL=postgresql://face_user:${POSTGRES_PASSWORD}@postgres:5432/face_attendance
      - MODEL_PATH=/app/models
    volumes:
      - ./ai-services:/app
      - ./models:/app/models
      - ./logs/ai_workers:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - face_attendance_network
    restart: unless-stopped

  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: face_attendance_postgres
    environment:
      - POSTGRES_DB=face_attendance
      - POSTGRES_USER=face_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init_scripts:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - face_attendance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U face_user -d face_attendance"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: face_attendance_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - face_attendance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: face_attendance_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    networks:
      - face_attendance_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Admin Dashboard
  admin_dashboard:
    build:
      context: .
      dockerfile: frontend/admin-dashboard/Dockerfile
    container_name: admin_dashboard
    environment:
      - REACT_APP_API_URL=https://${DOMAIN_NAME}/api/v1
      - REACT_APP_WS_URL=wss://${DOMAIN_NAME}/ws
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/admin-dashboard:/app
      - /app/node_modules
    networks:
      - face_attendance_network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - face_attendance_network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - face_attendance_network
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - face_attendance_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: celery_worker
    command: celery -A core worker -l info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://face_user:${POSTGRES_PASSWORD}@postgres:5432/face_attendance
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://admin:${RABBITMQ_PASSWORD}@rabbitmq:5672//
    volumes:
      - ./backend:/app
      - ./logs/celery:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - face_attendance_network
    restart: unless-stopped


  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: celery_beat
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://face_user:${POSTGRES_PASSWORD}@postgres:5432/face_attendance
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./logs/celery:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - face_attendance_network
    restart: unless-stopped

networks:
  face_attendance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  minio_data:
  static_volume:
  media_volume:
